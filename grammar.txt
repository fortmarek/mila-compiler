Program -> FunctionDeclaration Declaration Block .
Declaration -> ConstDeclaration Declaration 
Declaration -> VarDeclaration Declaration 
Declaration -> ε
MethodDeclaration -> FunctionDeclaration MethodDeclaration
MethodDeclaration -> ProcedureDeclaration MethodDeclaration 
MethodDeclaration -> ε
FunctionDeclaration -> function ident ( ident : type ) : type ; Declaration Block ;
// TODO: method declaration
ConstDeclaration -> const ident = number RestConstDeclaration ;
RestConstDeclaration -> , ident = number RestConstDeclaration 
RestConstDeclaration -> ε
VarDeclaration -> var ident RestVarDeclaration ;
RestVarDeclaration -> , ident RestVarDeclaration
RestVarDeclaration -> ε 
Block -> begin Instruction RestPříkazů end
RestPříkazů -> ; Instruction RestPříkazů
RestPříkazů -> ε
Instruction -> ForBlock
Instruction -> ident := Expression
Instruction -> write Expression
Instruction -> IfBlock
Instruction -> break
Insturction -> FunctionCall
Instruction -> WhileBlock
Instruction -> Block
Instruction -> ε
FunctionCall -> ident ( Expression RestOfFunctionExpression );
FunctionCall -> ident ( );
RestOfFunctionExpression -> , Expression RestOfFunctionExpression
RestOfFunctionExpression -> ε
WhileBlock -> while (Condition) do begin Instruction end;
ForBlock -> for ident := Expression to Expression do begin Instruction end;
ForBlock -> for ident := Expression downto Expression do begin Instruction end;
IfBlock -> if Condition then Instruction ElseBlock
ElseBlock -> else Instruction 
ElseBlock -> ε 
Condition -> Expression RelOp Expression
RelOp -> =
RelOp -> <>
RelOp -> <
RelOp -> >
RelOp -> <=
RelOp -> >=
Expression -> Term RestVýrazu
Expression -> - Term RestVýrazu
RestVýrazu -> + Term RestVýrazu
RestVýrazu -> - Term RestVýrazu
RestVýrazu -> ε
Term -> Faktor RestTermu
RestTermu -> * Faktor RestTermu
RestTermu -> / Faktor RestTermu
RestTermu -> ε
Faktor -> ident
Faktor -> number 
Faktor  -> ( Expression ) 